#!/usr/bin/env node
var debug = require('debug')('my-application');
const http = require('http');
var app = require('../app');

const port = normalizePort(process.env.HTTP_PORT || '3005');
const ip = process.env.HTTP_IP || '127.0.0.1';
app.set('port', port);
app.set('ip', ip);

console.log('=====================================================================');
console.log('www start: ', ip + ':' + port);

/**
* Create HTTP server.
*/
let server = http.createServer(app, ip);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, ip);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  let port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

function onError(error) {
  console.log('www start error');
  console.log('=====================================================================');
  if (error.syscall !== 'listen') {
    throw error;
  }
  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  console.log('www start success');
  console.log('=====================================================================');
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
